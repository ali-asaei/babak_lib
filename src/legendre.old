
#include <stdlib.h>
#include <malloc.h>
#include <math.h>
#include <stdio.h>
#include "babak_lib.h"

/***************************************************************************************/
// This function implements Eq. (7-66) of Kaplan's Advanced Calculus (2nd Ed.)
// f = input array
// nx = size of array f
// P = Legendre polynomial of order n
// N = size of array P
// n = order of the Legendre polynomial P
// w = working array of size N
/***************************************************************************************/
double FourierLegendreSeriesCoefficient(short *f, int nx, double *P, int N, int n, double *w)
{
	double cn;
	double delx;
	double u;
	double x;
	int k;

	if(f==NULL || P==NULL || w==NULL || N<2 || n<0 || nx<1) return(0.0);

	/////////////////////////////////////////////////////////////////////////
	// linearly interpolate array f to size N and store the results in w
	/////////////////////////////////////////////////////////////////////////
	delx = (nx-1.0)/(N-1.0);

	// Limiting the loop index to N-2 ensures that (k+1)<nx.
	for(int i=0; i<=(N-2); i++)
	{
		x = i*delx;
		k = (int)x;
		u = x - k; 
		w[i] = f[k]*(1.0-u) + f[k+1]*u;
	}
	w[N-1]=f[nx-1];
	/////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////
	// numberical integration takes place here
	/////////////////////////////////////////////////////////////////////////
#if 0
	// Non-optimized code left here to demonstrate what's going on.
	cn = 0.0;
	for(int i=0; i<N-1; i++)
	{
		cn += ((w[i]*P[i] + w[i+1]*P[i+1])/2.0);
	}
	cn *= (2.0/(N-1.0));
	cn *= ((2.0*n+1.0)/2.0);
#endif

	cn = (w[0]*P[0] + w[N-1]*P[N-1])/2.0;
	for(int i=1; i<=(N-2); i++)
		cn += w[i]*P[i];
	cn *= ((2.0*n+1.0)/(N-1.0));
	/////////////////////////////////////////////////////////////////////////

	return(cn);
}
/***************************************************************************************/
// end of FourierLegendreSeriesCoefficient() version 1.
/***************************************************************************************/

double FourierLegendreSeriesCoefficient(double *f, int nx, double *P, int N, int n, double *w)
{
	double cn;
	double delx;
	double u;
	double x;
	int k;

	if(f==NULL || P==NULL || w==NULL || N<2 || n<0 || nx<1) return(0.0);

	/////////////////////////////////////////////////////////////////////////
	// linearly interpolate array f to size N and store the results in w
	/////////////////////////////////////////////////////////////////////////
	delx = (nx-1.0)/(N-1.0);

	// Limiting the loop index to N-2 ensures that (k+1)<nx.
	for(int i=0; i<=(N-2); i++)
	{
		x = i*delx;
		k = (int)x;
		u = x - k; 
		w[i] = f[k]*(1.0-u) + f[k+1]*u;
	}
	w[N-1]=f[nx-1];
	/////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////
	// numberical integration takes place here
	/////////////////////////////////////////////////////////////////////////
	cn = (w[0]*P[0] + w[N-1]*P[N-1])/2.0;
	for(int i=1; i<=(N-2); i++)
		cn += w[i]*P[i];
	cn *= ((2.0*n+1.0)/(N-1.0));
	/////////////////////////////////////////////////////////////////////////

	return(cn);
}

double FourierLegendreSeriesCoefficient(float *f, int nx, double *P, int N, int n, double *w)
{
	double cn;
	double delx;
	double u;
	double x;
	int k;

	if(f==NULL || P==NULL || w==NULL || N<2 || n<0 || nx<1) return(0.0);

	/////////////////////////////////////////////////////////////////////////
	// linearly interpolate array f to size N and store the results in w
	/////////////////////////////////////////////////////////////////////////
	delx = (nx-1.0)/(N-1.0);

	// Limiting the loop index to N-2 ensures that (k+1)<nx.
	for(int i=0; i<=(N-2); i++)
	{
		x = i*delx;
		k = (int)x;
		u = x - k; 
		w[i] = f[k]*(1.0-u) + f[k+1]*u;
	}
	w[N-1]=f[nx-1];
	/////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////
	// numberical integration takes place here
	/////////////////////////////////////////////////////////////////////////
	cn = (w[0]*P[0] + w[N-1]*P[N-1])/2.0;
	for(int i=1; i<=(N-2); i++)
		cn += w[i]*P[i];
	cn *= ((2.0*n+1.0)/(N-1.0));
	/////////////////////////////////////////////////////////////////////////

	return(cn);
}
/***************************************************************************************/
// end of FourierLegendreSeriesCoefficient() version 2.
/***************************************************************************************/

/***************************************************************************************/
// Implements Eq. (7-64e) of Kaplan's Advanced Calculus (2nd Ed.).
// Returns an (n+1)xN matrix. The i-th row of this matrix contains the Legendre
// polynomial of degree i-1. Each polynomial is evaluated at N uniformly spaced
// points from -1.0 to 1.0 (including points -1.0 and 1.0). These points are 
// given by the second row of the matrix since P1(x)=x.
/***************************************************************************************/
double *LegendrePolynomials(int n, int N)
{
	double *P;
	double *x;
	double *p_1, *p_2, *p;

	// requires N to be greater than or equal to 2
	if(N<2) return(NULL);

	// requires n to be greater than or equal to 0
	if(n<0) return(NULL);

	x = (double *)calloc(N, sizeof(double));
	if(x==NULL) return(NULL);

	P = (double *)calloc( (n+1)*N ,sizeof(double));
	if(P==NULL) return(NULL);

	// x is an array of N real numbers uniformly spaced from 
	// -1.0 to 1.0 with x[0]=-1.0 and x[N-1]=1.0;
	for(int i=0; i<N; i++) x[i] = -1.0 + i*2.0/(N-1.0);

	if(n==0) 	// form P0 
	{
		for(int i=0; i<N; i++) P[i] = 1.0;
	}
	else if(n==1) 	// form P0 and P1 
	{
		for(int i=0; i<N; i++) 
		{
			P[i] = 1.0;
			P[i+N] = x[i];
		}
	}
	else
	{
		// form P0 and P1
		for(int i=0; i<N; i++) 
		{
			P[i] = 1.0;
			P[i+N] = x[i];
		}

		// form P2, ..., Pn
		for(int j=2; j<=n; j++) 
		{
			p = P + j*N;			// p points to the current row of matrix P
			p_1 = P + (j-1)*N;		// p_1 points to the row above p
			p_2 = P + (j-2)*N;		// p_2 points to the row above p_1

			for(int i=0; i<N; i++) 
				p[i] = ( (2*j-1)*x[i]*p_1[i] - (j-1)*p_2[i] )/j;
		}
	}

	free(x);

	return(P);
}
/***************************************************************************************/
// end of LegendrePolynomials()
/***************************************************************************************/

/***************************************************************************************/
// f = input array
// nx = size of array f
// n = highest order of the Legendre polynomial P
// The returned array will be of size n+1 representing the Fourier-Legendre coefficients
// c(0), c(1), ..., c(n) in Eq. (7-66) of Kaplan's Advanced Calculus (2nd Ed.).
/***************************************************************************************/
double *FourierLegendreAnalysis(short *f, int nx, int n, int N)
{
	double *P;
	double *cn;
	double *w;

	if(n<0 || nx<1 || f==NULL) return(NULL);

	w = (double *)calloc(N,sizeof(double));
	cn = (double *)calloc(n+1,sizeof(double));

	P=LegendrePolynomials(n, N);

	for(int i=0; i<=n; i++)
	{
		cn[i]=FourierLegendreSeriesCoefficient(f, nx,  P+i*N, N, i, w);
	}

	free(P);
	free(w);

	return(cn);
}
/***************************************************************************************/
// end of FourierLegendreAnalysis() version 1.
/***************************************************************************************/

double *FourierLegendreAnalysis(short *f, int nx, int ny, int mx, int my, int N)
{
	double *Px,*Py;
	double *c;			// series coefficients
	double *w;			
	double *fy;

	if(f==NULL || nx<1 || ny<1 || mx<0 || my<0) return(NULL);

	w = (double *)calloc(N,sizeof(double));
	c = (double *)calloc( (mx+1)*(my+1),sizeof(double));

	Px=LegendrePolynomials(mx, N);
	Py=LegendrePolynomials(my, N);

	fy = (double *)calloc(ny,sizeof(double));

	for(int q=0; q<=mx; q++)
	{
		for(int j=0; j<ny; j++)
			fy[j]=FourierLegendreSeriesCoefficient(f+j*nx, nx,  Px+q*N, N, q, w);

		for(int r=0; r<=my; r++)
			c[r*(mx+1)+q]=FourierLegendreSeriesCoefficient(fy, ny,  Py+r*N, N, r, w);
	}

	free(fy);
	free(Px);
	free(Py);
	free(w);

	return(c);
}
/***************************************************************************************/
// end of FourierLegendreAnalysis() version 2.
/***************************************************************************************/

double *FourierLegendreAnalysis(short *f, int nx, int ny, int nz, int mx, int my, int mz, int N)
{
	double *Px,*Py,*Pz;
	double *c;			// series coefficients
	double *w;			
	double *fy, *fyz;
	int mp, np, mxp;

	if(f==NULL || nx<1 || ny<1 || nz<1 || mx<0 || my<0 || mz<0) return(NULL);

	w = (double *)calloc(N,sizeof(double));
	c = (double *)calloc( (mx+1)*(my+1)*(mz+1),sizeof(double));

	mp = (mx+1)*(my+1);
	np = nx*ny;
	mxp = mx+1;

	Px=LegendrePolynomials(mx, N);
	Py=LegendrePolynomials(my, N);
	Pz=LegendrePolynomials(mz, N);

	fyz = (double *)calloc(ny*nz,sizeof(double));
	fy = (double *)calloc(nz,sizeof(double));

	for(int q=0; q<=mx; q++)
	{
		for(int j=0; j<ny; j++)
		for(int k=0; k<nz; k++)
			fyz[k*ny+j]=FourierLegendreSeriesCoefficient(f+k*np+j*nx, nx,  Px+q*N, N, q, w);

		for(int r=0; r<=my; r++)
		{
			for(int k=0; k<nz; k++)
				fy[k]=FourierLegendreSeriesCoefficient(fyz+k*ny, ny,  Py+r*N, N, r, w);

			for(int s=0; s<=mz; s++)
				c[s*mp+r*mxp+q]=iourierLegendreSeriesCoefficienL(fy, nz,  Pz+s*N, N, s, w);
		}
	}

	free(fy);
	free(fyz);
	free(Px);
	free(Py);
	free(Pz);
	free(w);

	return(c);
}

double *FourierLegendreAnalysis(float *f, int nx, int ny, int nz, int mx, int my, int mz, int N)
{
	double *Px,*Py,*Pz;
	double *c;			// series coefficients
	double *w;			
	double *fy, *fyz;
	int mp, np, mxp;

	if(f==NULL || nx<1 || ny<1 || nz<1 || mx<0 || my<0 || mz<0) return(NULL);

	w = (double *)calloc(N,sizeof(double));
	c = (double *)calloc( (mx+1)*(my+1)*(mz+1),sizeof(double));

	mp = (mx+1)*(my+1);
	np = nx*ny;
	mxp = mx+1;

	Px=LegendrePolynomials(mx, N);
	Py=LegendrePolynomials(my, N);
	Pz=LegendrePolynomials(mz, N);

	fyz = (double *)calloc(ny*nz,sizeof(double));
	fy = (double *)calloc(nz,sizeof(double));

	for(int q=0; q<=mx; q++)
	{
		for(int j=0; j<ny; j++)
		for(int k=0; k<nz; k++)
			fyz[k*ny+j]=FourierLegendreSeriesCoefficient(f+k*np+j*nx, nx,  Px+q*N, N, q, w);

		for(int r=0; r<=my; r++)
		{
			for(int k=0; k<nz; k++)
				fy[k]=FourierLegendreSeriesCoefficient(fyz+k*ny, ny,  Py+r*N, N, r, w);

			for(int s=0; s<=mz; s++)
				c[s*mp+r*mxp+q]=FourierLegendreSeriesCoefficient(fy, nz,  Pz+s*N, N, s, w);
		}
	}

	free(fy);
	free(fyz);
	free(Px);
	free(Py);
	free(Pz);
	free(w);

	return(c);
}
/***************************************************************************************/
// end of FourierLegendreAnalysis() version 3.
/***************************************************************************************/

/***************************************************************************************/
// cn = input array of  Fourier-Legendre coefficients of size n+1
// Returns a synthesized array of size nx.
/***************************************************************************************/
float *FourierLegendreSynthesis(double *cn, int n, int nx)
{
	float *f;
	double *P;

	if(cn==NULL || nx<1 || n<0) return(NULL);

	f = (float *)calloc(nx,sizeof(float));

	P=LegendrePolynomials(n, nx);

	for(int i=0; i<nx; i++)
	{
		f[i]=0.0;
		for(int j=0; j<=n; j++)
			f[i] += (float)(cn[j]*P[j*nx+i]);
	}

	free(P);
	return(f);
}
/***************************************************************************************/
// end of FourierLegendreSynthesis() version 1.
/***************************************************************************************/

float *FourierLegendreSynthesis(double *c, int nx, int ny, int mx, int my)
{
	double *Px;
	double *Py;
	float *f;
	double *sum;
	int mxp;

	mxp = mx+1;

	if(c==NULL || nx<1 || ny<1 || mx<0 || my<0) return(NULL);

	f = (float *)calloc(nx*ny,sizeof(float));

	Px=LegendrePolynomials(mx, nx);
	Py=LegendrePolynomials(my, ny);

	sum = (double *)calloc(ny*mxp,sizeof(double));	

	for(int q=0; q<=mx; q++)
	for(int j=0; j<ny; j++)
	{
		for(int r=0; r<=my; r++)
			sum[j*mxp + q] += c[r*mxp + q]*Py[r*ny + j];
	}

	for(int j=0; j<ny; j++)
	for(int i=0; i<nx; i++)
	{
		for(int q=0; q<=mx; q++)
			f[j*nx + i] += sum[j*mxp + q]*Px[q*nx + i];
	}

	free(sum);
	free(Px); 
	free(Py); 

	return(f);
}
/***************************************************************************************/
// end of FourierLegendreSynthesis() version 2.
/***************************************************************************************/

float *FourierLegendreSynthesis(double *c, int nx, int ny, int nz, int mx, int my, int mz)
{
	double *Px;
	double *Py;
	double *Pz;
	float *f;
	double *sum1, *sum2;
	int mp, np, mxp, myp;
	int indx1, indx2;

	np = nx*ny;
	mp = (mx+1)*(my+1);
	mxp = mx+1;
	myp = my+1;

	if(c==NULL || nx<1 || ny<1 || nz<1 || mx<0 || my<0 || mz<0) return(NULL);

	f = (float *)calloc(nx*ny*nz,sizeof(float));

	Px=LegendrePolynomials(mx, nx);
	Py=LegendrePolynomials(my, ny);
	Pz=LegendrePolynomials(mz, nz);

	sum1 = (double *)calloc(myp*nz,sizeof(double));	
	sum2 = (double *)calloc(ny*nz,sizeof(double));	

	for(int q=0; q<=mx; q++)
	{
		for(int r=0; r<=my; r++)
		for(int z=0; z<nz; z++)
		{
			indx1 = z*myp + r;
			indx2 = r*mxp + q;
			sum1[indx1] = 0.0;
			for(int s=0; s<=mz; s++)
				sum1[indx1] += c[s*mp+indx2]*Pz[s*nz + z];
		}

		for(int z=0; z<nz; z++)
		for(int y=0; y<ny; y++)
		{
			indx1 = z*ny + y;
			indx2 = z*myp;
			sum2[indx1] = 0.0;
			for(int r=0; r<=my; r++)
				sum2[indx1] += sum1[indx2 + r]*Py[r*ny + y];
		}

		for(int z=0; z<nz; z++)
		for(int y=0; y<ny; y++)
		{
			indx1 = z*np + y*nx;
			indx2 = z*ny + y;
			for(int x=0; x<nx; x++)
				f[indx1 + x] += sum2[indx2]*Px[q*nx + x];
		}
	}

	free(sum1);
	free(sum2);
	free(Px); 
	free(Py); 
	free(Pz); 

	return(f);
}
/***************************************************************************************/
// end of FourierLegendreSynthesis() version 3.
/***************************************************************************************/

//////////////////////////////////////////////////////////////////////////////////

#if 0
int main(int argc, char **argv)
{
	FILE *fp;
	int nx, ny, nz, np, nv;
    float dx, dy, dz;
	int type;
	int mx=150;
	int my=150;
	int mz=150;
	short *f;
	float *fr;
	double *c;

	f = (short *)read_analyze_image("trg", &nx, &ny, &nz, &dx, &dy, &dz, &type,0);

	np = nx*ny;
	nv = nx*ny*nz;

printf("0\n");
	c=FourierLegendreAnalysis(f, nx, ny, nz, mx, my, mz,1000);
printf("1\n");
	fr=FourierLegendreSynthesis(c, nx, ny, nz, mx, my, mz);
printf("2\n");
	for(int i=0; i<nv; i++) f[i]=(short)(fr[i]+0.5);
	write_analyze_image("tt", f, nx, ny, nz, dx, dy, dz);
	
/**
for(int k=0; k<nz; k++)
{
	printf("%d\n",k);
	c=FourierLegendreAnalysis(f+k*np, nx, ny, mx, my,1000);
	fr=FourierLegendreSynthesis(c, nx, ny, mx, my);
	for(int i=0; i<np; i++)
		(f+k*np)[i]=(short)(fr[i]+0.5);
	free(c); free(fr);
}
	write_analyze_image("tt", f, nx, ny, nz, dx, dy, dz);
**/
	free(f);
}
#endif

#if 0
int main(int argc, char **argv)
{
	FILE *fp;
	int nx=161;
	int n=80;
	short *f;

	double *cn;
	float *f_recon;

	f = (short *)calloc(nx,sizeof(double));

	fp = fopen("1d_test_array.txt","r");
	for(int i=0; i<nx; i++)
	{
		fscanf(fp,"%d\n",&f[i]);
	}
	fclose(fp);

	cn=FourierLegendreAnalysis(f, nx, n,1000);
	f_recon=FourierLegendreSynthesis(cn, n, nx);

	for(int i=0; i<nx; i++) printf("%d\t%d\t%f\n",i,f[i],f_recon[i]);
}
#endif
